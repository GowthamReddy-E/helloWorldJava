pipeline {
    agent { label 'one' }

    environment {
        MAVEN_HOME = '/opt/apache-maven-*'
        PATH = "${MAVEN_HOME}/bin:${env.PATH}"
        JFROG_URL = 'https://gowthamreddy.jfrog.io/artifactory/'
        JFROG_REPO = 'docker-trial'
        OTHER_SERVER_URL = 'root@192.168.17.130:/home/JenkinsWorkspace'
    }

    stages {
        stage('Clean') {
            steps {
                sh "mvn clean"
            }
        }

        stage('Test') {
            steps {
                sh "mvn test"
            }          
        }

        stage('Deploy') {
            steps {
                sh "mvn deploy"
            }
        }

        stage('Publish to JFrog') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'jfrogUser', passwordVariable: 'JFROG_PASSWORD', usernameVariable: 'JFROG_USERNAME')]) {
                        def server = Artifactory.server 'browserArtifactory' // Replace with the configured Artifactory server ID
                        def buildInfo = Artifactory.newBuildInfo()

                        // Set the Artifactory server URL and repository details
                        buildInfo.env.capture = true
                        buildInfo.env.artifactoryUrl = JFROG_URL // Use the defined environment variable
                        buildInfo.env.artifactoryRepo = JFROG_REPO // Use the defined environment variable

                        // Set username and password from Jenkins Credentials
                        buildInfo.env.artifactoryUsername = JFROG_USERNAME
                        buildInfo.env.artifactoryPassword = JFROG_PASSWORD

                        // Publish the build information to JFrog Artifactory
                        server.publishBuildInfo buildInfo
                    }
                }
            }
        }

        stage('Publish HTML Reports') {
            steps {
                publishHTML(allowMissing: false, alwaysLinkToLastBuild: true, keepAll: true, reportDir: './test-output/', reportFiles: 'index.html', reportName: 'HTML Report')
            }
        }

        stage('Transfer Artifacts to FTP Server') {
            steps {
                script {
                    sshagent(credentials: ['agentone'], ignoreMissing: true) {
                        // Use the defined environment variable for the target directory
                        sh "scp -o StrictHostKeyChecking=no ./target/helloworldjava-1.4-SNAPSHOT.jar ${OTHER_SERVER_URL}/"
                    }
                }
            }
        }
    }
}
